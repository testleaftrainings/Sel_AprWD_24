Today Agenda:   
   09:30-10:00 -Adavance Xpath
   10:00-10:45 -Inheritance
   10:45-11:15 -BreakOut+Break
   11:15-12:00 -Polymorphism
   12:00-12:25- BreakOut
   12:25-12:45- LiveQuiz


   
Inheritance:
Definition of Inheritance:

Inheritance is a fundamental principle in object-oriented programming that allows a
class to inherit attributes and behaviors (methods) from another class.This uses extends keyword

Advantages of Inheritance:

Reusability: Inheritance promotes the reuse of existing code without having to rewrite it.
Readability: It makes the code more simple by establishing clear relationships between classes.
Hierarchy: Establishes parent-child relationships between Classes and Interfaces,
 making the structure easier to understand and maintain.


Keyword: extends

Types of Inheritance:

Single or simple: A class inherits from one parent class.(public class CarP extends VehicelGP)

Multiple: A class inherits behaviors from more than one class, typically achieved through
 interfaces in Java.

Multilevel: A class inherits from a child class, creating a multilevel chain.
(BMWC  extends CarP ,CarP extends VehicelGP)
 
Hierarchical: Multiple Child classes inherit from a single parent class.
(CarP extends VehicelGP, AutoP extends VehicelGP)

Hybrid: A combination of multilevel and hierarchical inheritance.


Example:

Integer extends Number

single : class ChromeDriver extends ChromiumDriver

Multilevel :
 class ChromeDriver extends ChromiumDriver
class ChromiumDriver extends RemoteWebDriver

Hierarchical:

ChromiumDriver extends RemoteWebDriver 
FirefoxDriver extends RemoteWebDriver
safariDriver extends RemoteWebDriver

Hybrid:

combination of grandparent,parent& child






Definition

Polymorphism in Java is a concept by which we can perform a single action in different ways.
It is derived from two Greek words: "poly" and "morphs". "Poly" means many and "morphs" means forms.

Types - compile-time polymorphism - runtime polymorphism. 

Compile-time polymorphism is achieved by method overloading, while runtime polymorphism is achieved 
by method overriding. 
- It allows objects of different classes to be treated as objects of a common super class for seamless interaction, typically through the use of method overriding within an inheritance hierarchy. - This enables Java programs to be written more abstractly, promoting scalability and maintainability.

//static ,compile- time,early, method overloading

Overloading: - It refers to the ability to create multiple methods of the same name 
with different implementations or arguments pass.
-Calls to an overloaded method will run a specific implementation of that method appropriate 
to the context, based on the number and type of arguments passed.

public class Poly{

public void browser(String name){

}

public void browser(int version,String name){

}

public void browser(int data,String Value,double x){

}



}


Java Examples:

Methods like add() can be overloaded to accept different types of arguments.
Similarly, substring() in the String class is overloaded to accept different starting 
and ending points for the substring.
println("hi");
printIn(car);

Selenium WebDriver Examples:

The frame() method in Selenium WebDriver is overloaded to allow different types 
of arguments like an integer (index of the frame), a String (name or ID of the frame), or a WebElement.

frame(int)
frame(string name or id)
frame(webelement)

Advantages of Overloading:

Flexibility: Allows methods to handle different data types and numbers of arguments.
Readability: It can make the code more readable since the same method name can be used for 
similar actions on different types of input.
Reduces Complexity: Developers can use the same method name to perform similar actions, 
which simplifies code organization and maintenance.



Overriding

Method overriding in Java occurs when a (child)subclass has a method with the same name, return type,
 and parameters as a method in its superclass(parent ).

parent:
 public void phone(){
  syso("iphone 13")
 }


child:
c extends p
public void phone(){
  syso(iphone 14)
}

object for child class
c.phone

iphone 14

It's a key feature of runtime polymorphism and allows a subclass to provide a 
specific implementation for a method that is already provided by its parent class
 
 Examples:

equals() of String class is overriden from the Object class
toString() of String class is overriden from the Object class

quit() of ChromiumDriver is overriden from the RemoteWebDriver Class
